@{
    Layout = "_LayoutHome";
}


<div class="container-fluid add-form-list">
    <div class="row">
        <div class="col-sm-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <div class="header-title">
                        <h4 class="card-title">Thêm sản phẩm</h4>
                    </div>
                </div>
                <div class="card-body">
                    <form action="page-list-product.html" data-toggle="validator">
                        <div class="row">

                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>Tên sản phẩm *</label>
                                    <input id="ip-product-name" type="text" class="form-control" placeholder="Tên sản phẩm" required>
                                </div>
                            </div>



                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Khối lượng *</label>
                                    <input id="ip-product-weight" type="number" class="form-control" placeholder="g">
                                </div>
                            </div>


                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Đơn vị tính *</label>
                                    <input id="ip-product-unit" type="text" class="form-control" placeholder="đơn vị">
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>Ảnh sản phẩm</label>
                                    <input type="file" hidden class="hide" id="ip-product-image">
                                    <div class="mt-3" style="width: 220px; height: 180px; padding: 5px; border-radius:20px; border-style: dashed; border-width: 1px;">
                                        <img id="preview-image"
                                             src = "http://res.cloudinary.com/dymmvrufy/image/upload/v1732958992/lemoo_pos/products/cgvy4owbou09tb6okwvu.svg"
                                             alt="Nhấn để chọn ảnh"
                                             style="cursor: pointer; width: 100%; height: 100%; object-fit:cover; border-radius:inherit;">
                                    </div>
                                </div>
                                
                            </div>


                            <div class="col-md-12">
                                    <div class="form-group">
                                        <label> Mô tả sản phẩm </label>
                                        <div id="product-description-editor"></div>
                                       
                                    </div>
                             </div>

                            <div class="col-md-6">
                                @await Component.InvokeAsync("ProductCategorySelect")
                            </div>

                            <div class="col-md-6">
                                @await Component.InvokeAsync("BranchSelect", new { allowMultiSelect = true })
                            </div>

                            <div class="col-md-12">
                                @await Component.InvokeAsync("BrandSelect")
                            </div>
                            

                            <div class="col-md-12">

                                <div class="form-group">
                                    <label>Biến thể sản phẩm</label>
                                     <div class ="d-flex" style = "gap:20px;">
                                        <div class="custom-control custom-checkbox">
                                                <input checked name="product-variant-options" type="radio" class="custom-control-input " id="product-variant-options--no-variant">
                                                <label class="custom-control-label " for="product-variant-options--no-variant">Sản phẩm có một biến thể</label>
                                            </div>

                                            <div class="custom-control custom-checkbox">
                                                <input name="product-variant-options" type="radio" class="custom-control-input" id="product-variant-options--many-variant">
                                                <label class="custom-control-label " for="product-variant-options--many-variant">Sản phẩm có nhiều biến thể</label>
                                            </div>
                                    </div>
                                    <div id = "product-no-variant-container">
                                        
                                    </div>
                                    <div id = "product-many-variant-container" style="display:none;">
                                        <button id="btn-add-variant" type="button" class="btn btn-outline-primary mt-2">Thêm thuộc tính</button>

                                        <div id="variant-container">
                                            

                                        </div>

                                        <div class="d-flex w-100 justify-content-between">
                                            <p class="my-3">Danh sách hàng hóa cùng loại</p>
                                            <button id="btn-sync-variant" type="button" class="btn ">
                                                <i class="fa-solid fa-rotate"></i>
                                            </button>
                                        </div>
                                        <div id="variant-table">
                                           
                                        </div>

                                    </div>
                                </div>
                            </div>


                        </div>
                        <div class = "d-flex justify-content-end">
                            <button type="button" id="btn-submit-product" class="btn btn-primary mr-2 ">Thêm sản phẩm</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- Page end  -->
</div>

<link href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.snow.css" rel="stylesheet" />


<style>
    .ql-toolbar {
        background-color: #f8f9fa; /* Thay đổi màu nền */
        border: 1px solid #dee2e6; /* Đường viền */
        border-radius: 0.375rem; /* Bo góc */
    }

    .ql-editor {
        min-height: 200px; /* Chiều cao tối thiểu */
        background: #ffffff; /* Màu nền */
        border: 1px solid #ced4da; /* Đường viền */
        border-radius: 0.375rem; /* Bo góc */
        padding: 15px; /* Khoảng cách bên trong */
        font-size: 1rem; /* Kích thước chữ */
        color: #212529; /* Màu chữ */
    }


  
</style>

<style>
    .toggler-wrapper {
        display: block;
        width: 45px;
        height: 25px;
        cursor: pointer;
        position: relative;
    }

        .toggler-wrapper input[type="checkbox"] {
            display: none;
        }

            .toggler-wrapper input[type="checkbox"]:checked + .toggler-slider {
                background-color: #44cc66;
            }

        .toggler-wrapper .toggler-slider {
            background-color: #ccc;
            position: absolute;
            border-radius: 100px;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            -webkit-transition: all 300ms ease;
            transition: all 300ms ease;
        }

        .toggler-wrapper .toggler-knob {
            position: absolute;
            -webkit-transition: all 300ms ease;
            transition: all 300ms ease;
        }


        .toggler-wrapper.style-1 input[type="checkbox"]:checked + .toggler-slider .toggler-knob {
            left: calc(100% - 19px - 3px);
        }

        .toggler-wrapper.style-1 .toggler-knob {
            width: calc(25px - 6px);
            height: calc(25px - 6px);
            border-radius: 50%;
            left: 3px;
            top: 3px;
            background-color: #fff;
        }

</style>


<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js"></script>


<script>

      let variants = {};
      let varivantDetails = [];
</script>

<script>

    const productManyVariantCheckbox = document.getElementById("product-variant-options--many-variant");
    const productNoVariantCheckbox = document.getElementById("product-variant-options--no-variant");

    const productManyVariantContainer = document.getElementById("product-many-variant-container");
    const productNoVariantContainer = document.getElementById("product-no-variant-container");

    productManyVariantCheckbox.addEventListener("change", (e) => {
        if (!e.target.checked) return;
        productNoVariantContainer.style = "display:none";
        productManyVariantContainer.style = "display:block";
        variants = {};
        varivantDetails = []
    })

    productNoVariantCheckbox.addEventListener("change", (e) => {
        if (!e.target.checked) return;
        productManyVariantContainer.style = "display:none";
        productNoVariantContainer.style = "display:block";

        variants = {};
        varivantDetails = []
        initDefaultVariant();
        
    })


    const initDefaultVariant = () => {
        
        const html = `
            <table class="table my-3">
                <thead>
                    <tr class="ligth">
                        <th scope="col">Biến thể</th>
                        <th scope="col">Skucode</th>
                        <th scope="col">Barcode</th>
                        <th scope="col">Kho hàng</th>
                        <th scope="col">Giá nhập</th>
                        <th scope="col">Giá bán</th>
                        <th scope="col">Cho phép bán</th>
                    </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">mặc định</th>
                            <td>
                                <input id="default-skucode" type="text" class="form-control" placeholder="SKU" >
                            </td>
                            <td>
                                <input  id="default-barcode" type="text" class="form-control" placeholder="Barcode">
                            </td>
                            <td>
                                <input  id="default-quantity" type="number" class="form-control" placeholder="Kho hàng" value = "0" min="0">
                            </td>
                            <td>
                                <input  id="default-costPrice" type="number" class="form-control" placeholder="Giá nhập" value = "0" min="0">
                            </td>
                            <td>
                                <input id="default-sellingPrice" type="number" class="form-control" placeholder="Giá bán" value = "0" min="0">
                            </td>
                             <td class = "">
                                    <label class="toggler-wrapper style-1">
                                              <input checked type="checkbox" id="default-allowSale" >
                                      <div class="toggler-slider">
                                        <div class="toggler-knob"></div>
                                      </div>
                                    </label>
                            </td>
                        </tr>
                    </tbody>
            </table>
        `

        productNoVariantContainer.innerHTML = html;

        varivantDetails.push({
            name: "default",
            attributeValues: ["default-variant"]
        })

        variants = {
            "product-variants-default": {
                name: "default",
                variants: {
                    "default": {
                        Id: "default-variant",
                        Name: "mặc định"
                    }
                }
            }
        }

       
    }

    initDefaultVariant();

</script>

<script>
    const inputFile = document.getElementById('ip-product-image');
    const previewImage = document.getElementById('preview-image');

    // Khi người dùng nhấn vào ảnh xem trước, kích hoạt click trên input file
    previewImage.addEventListener('click', () => {
        inputFile.click();
    });

    // Khi người dùng chọn tệp, hiển thị ảnh xem trước
    inputFile.addEventListener('change', (event) => {
        const file = event.target.files[0]; // Lấy tệp đầu tiên
        if (file) {
            const reader = new FileReader();

            reader.onload = function (e) {
                // Gán src của thẻ img với ảnh đã chọn
                previewImage.src = e.target.result;
            };

            reader.readAsDataURL(file); // Đọc tệp dưới dạng Data URL
        }
    });

</script>


<script>
  
    const buttonAddVariant = document.getElementById("btn-add-variant")
    const variantContainer = document.getElementById("variant-container")
   
    

    const handleRemoveAttribute = (index) => {
        variantContainer.removeChild(document.getElementById(`product-variant-${index}`))
        delete variants[`product-variants-${index}`]
   
    }

    const handleRemoveVariant = (containerIndex, index) => {
        const container = document.getElementById(`product-variants-${containerIndex}`);
       
        if (container.children.length <= 6) {
            container.children[container.children.length - 2].classList.remove("d-none")
        }

        if (container.children.length <= 3) {
            return;
        }

        delete variants[`product-variants-${containerIndex}`]["variants"][index];


        container.removeChild(document.getElementById(`variant-${index}-${containerIndex}`))
    }


    const handleChangeVariant = (e, key, variantId) => {

        const value = e.target.value;
        variants[key] = {
            ...variants[key],
            variants: {
                ...variants[key].variants,
                [variantId]: {
                    Name: value, 
                    Id: crypto.randomUUID()
                }
            }
        }
    }


    const handleAddVariant = (index) => {
        const container = document.getElementById(`product-variants-${index}`);
        if (container.children.length >= 6) {
            container.children[container.children.length - 2].classList.add("d-none")
            return;
        } else {
            container.children[container.children.length - 2].classList.remove("d-none")
        }
       
        container.insertAdjacentHTML("afterbegin", `
                           <div class = "my-2 d-flex" id = "variant-${container.children.length}-${index}">
                                            <input onChange = "handleChangeVariant(event, 'product-variants-${index}', ${container.children.length} )" autofocus type="text" class="form-control " placeholder="Biến thể">
                                    <button onClick = "handleRemoveVariant('${index}' ,${container.children.length})" type="button" class="btn btn-outline-warning">xóa</button>
                   </div>
        `)
    }

    const handleChangeAttributeName = (e, key) => {
        const value = e.target.value;

        variants[key] = {
            ...variants[key],
            name: value,
        }
    }


    buttonAddVariant.addEventListener("click", ()=> {
        const variantCount = Object.keys(variants).length
        if (variantCount >= 2) return;
        
        const containerId = "id_" + crypto.randomUUID();

        variantContainer.insertAdjacentHTML("beforeend", `
                            <div class="col-md-12 d-flex align-items-center my-2" id = "product-variant-${containerId}">
                                        <button onClick = "handleRemoveAttribute('${containerId}')" type="button" class="btn btn-outline-warning">xóa</button>
                        <div class="my-2 col-md-4">
                                                    <input onChange = "handleChangeAttributeName(event, 'product-variants-${containerId}')" type="text" class="form-control " placeholder="Tên thuộc tính">
                        </div>
                                <div id = "product-variants-${containerId}" class="my-2 col-md-7 card p-2" style="display:flex; flex-wrap:wrap">
                                                <button onClick = "handleAddVariant('${containerId}')" type="button" class="btn btn-primary" style="max-width:max-content">thêm</button>
                            <input hidden type="text" class="form-control " placeholder="Tên biến thể" style="max-width:200px">
                        </div>
                    </div>
        `)

        variants[`product-variants-${containerId}`] = {

            name: "",
            variants: {}
        }
        handleAddVariant(containerId)
    })


</script>


<script>

    const btnSyncVariant = document.getElementById("btn-sync-variant");


    btnSyncVariant.addEventListener("click", () => {
        renderVariantTable()
    })

    const getVariants = (data) => {
        const variantKeys = Object.keys(data);
        return variantKeys.map(key => {
            return {
                name: data[key].name,
                options: Object.values(data[key].variants)
            };
        });
    }

    const generateCombinations = (variants, index = 0, current = [], result = []) => {
     
        if (index === variants.length) {
            const name = current.map(value => value.Name).join(" - ")
            result.push(name);
            varivantDetails.push({
                name,
                attributeValues: current.map(item=> item.Id)
            })
            return result;
        }

        variants[index].options.forEach(option => {
            generateCombinations(variants, index + 1, [...current, option], result);
        });

        return result;
    }


    const renderVariantTable = () => {


        const container = document.getElementById("variant-table")
     

        if (Object.keys(variants).length <= 0) {
            container.innerHTML = "";
            return;
        }


        const variantData = getVariants(variants);
        varivantDetails = []
        const combinations = generateCombinations(variantData);
       
        let tableHTML = `
            <table class="table my-3">
              <thead>
                <tr class="ligth">
                  <th scope="col">Biến thể</th>
                  <th scope="col">Skucode</th>
                  <th scope="col">Barcode</th>
                  <th scope="col">Kho hàng</th>
                  <th scope="col">Giá nhập</th>
                  <th scope="col">Giá bán</th>
                  <th scope="col">Cho phép bán</th>
                </tr>
              </thead>
              <tbody>
      `;

        
        combinations.forEach(combination => {
       
          
            tableHTML += `
          <tr>
            <th scope="row">${combination}</th>
            
            <td>
                  <input id="${combination}-skucode" type="text" class="form-control" placeholder="SKU">
            </td>
            <td>
                  <input  id="${combination}-barcode" type="text" class="form-control" placeholder="Barcode">
            </td>
             <td>
                  <input  id="${combination}-quantity" type="number" class="form-control" placeholder="Kho hàng" value = "0" min="0">
            </td>
            <td>
                      <input  id="${combination}-costPrice" type="number" class="form-control" placeholder="Giá nhập" value = "0" min="0">
            </td>
            <td>
                      <input id="${combination}-sellingPrice" type="number" class="form-control" placeholder="Giá bán" value = "0" min="0">
            </td>
            <td>
                       <label class="toggler-wrapper style-1">
                                <input checked type="checkbox" id="${combination}-allowSale" >
                        <div class="toggler-slider">
                        <div class="toggler-knob"></div>
                        </div>
                           </label>
            </td>
          </tr>
        `;
        });

        tableHTML += `
          </tbody>
        </table>
      `;

        container.innerHTML = tableHTML;
       

    }

  



</script>


<script>

    var quill = new Quill('#product-description-editor', {
        placeholder: 'Nhập mô tả cho sản phẩm của bạn',
        modules: {
            syntax: true,
            toolbar: [
                // Nhóm các công cụ
                ['bold', 'italic', 'underline'],        // In đậm, in nghiêng, gạch dưới, gạch ngang
                ['blockquote', 'code-block'],                    // Trích dẫn, khối mã
                [{ 'header': 1 }, { 'header': 2 }],              // Tiêu đề h1, h2
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],   // Danh sách thứ tự, không thứ tự
                [{ 'script': 'sub' }, { 'script': 'super' }],    // Chỉ số dưới, trên
                [{ 'indent': '-1' }, { 'indent': '+1' }],        // Thụt lề
                [{ 'direction': 'rtl' }],                       // Viết từ phải sang trái
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],       // Định dạng tiêu đề
                [{ 'color': [] }, { 'background': [] }],         // Màu chữ, màu nền
                [{ 'font': [] }],                               // Font chữ
                [{ 'align': [] }],                              // Căn chỉnh
                ['link',],                     // Chèn liên kết, hình ảnh, video
                ['clean']                                       // Nút xóa định dạng
            ]
        },
        theme: 'snow'
    });

</script>

<script>

    const btnSubmitProduct = document.getElementById("btn-submit-product");

    quill.on('text-change', (delta, oldDelta, source) => {
        oldDelta.insert;
    });


    btnSubmitProduct.addEventListener("click",async ()=> {
        const productName = document.getElementById("ip-product-name").value;
        const productWeight = Number(document.getElementById("ip-product-weight").value);
        const productUnit = document.getElementById("ip-product-unit").value;
        const productDescription = quill.root.innerHTML;
    
      

        // {
        //     name: áo thun,
        //      unit: cái,
        //     desc: "adsfasdfasdfs"
        //     variants: [
        //         {
        //             name: đỏ - xl
        //             price: 1000,
        //             skuCode: ao_thun_do_xl,
        //             barcode: barcode_ao_thun,
        //             attributeValues: [1, 4]
        //         },
        //         ....
        //      ],
        //     attributes: [
        //         {
        //             name: màu sắc,
        //             values: [{ id: 1, name: đỏ }, { id: 2, name: xanh }, { id: 3, name: vàng }]
        //         },
        //         {
        //             name: kích thước,
        //             values: [{ id: 4, name: xl }, { id: 5, name: lg }]
        //         }
        //     ],

        // }


        const data = {
            Name: productName,
            Unit: productUnit,
            Weight: productWeight,
            Description: productDescription,
            Variants: [],
            Attributes: Object.keys(variants).map(key => {
                return {
                    Name: variants[key].name,
                    Values: Object.values(variants[key].variants)
                };
            }),
            CategoryId: Number(document.getElementById("categories").value),
            BrandId: Number(document.getElementById("brands").value),
            Branches: Array.from(document.getElementById("branches")).filter(option => option.selected).map(option => Number(option.value))
        };

       

        varivantDetails.forEach(variant => {
          
            const variantDetail = {
                Name: variant.name,
                SkuCode: document.getElementById(`${variant.name}-skucode`)?.value,
                BarCode: document.getElementById(`${variant.name}-barcode`)?.value,
                CostPrice: Number(document.getElementById(`${variant.name}-costPrice`)?.value ?? "0") ,
                SellingPrice: Number(document.getElementById(`${variant.name}-sellingPrice`)?.value ?? "0"),
                Quantity: Number(document.getElementById(`${variant.name}-quantity`)?.value ?? "0"),
                AttributeValues: variant.attributeValues,
                AllowSale: Boolean(document.getElementById(`${variant.name}-costPrice`)?.value ?? "false")
            }

            data.Variants.push(variantDetail)
        })


        const formData = new FormData();


        formData.append("product", JSON.stringify(data));

        const productImage = document.getElementById('ip-product-image');
        formData.append('image', productImage.files[0]);
       

         try {
            btnSubmitProduct.classList.add("create-product-loading");
            btnSubmitProduct.textContent = "Đang tạo sản phẩm"
            btnSubmitProduct.disabled = true;

             console.log({data})

            const response = await axios.post("/products/create", formData, {
                headers: {
                    "content-type": "multipart/form-data"
                }
            });

            const baseurl = window.location.origin;
            window.location.href = baseurl  + "/products"

         }catch (error) {
             console.log(error);
             alert("Tạo sản phẩm thất bại");
         }

        btnSubmitProduct.classList.remove("create-product-loading");
        btnSubmitProduct.textContent = "Thêm sản phẩm"
        btnSubmitProduct.disabled = false;
    })

</script>